" Author: Penn Su (pennsu@gmail.com)

" Vundle {{{

set nocompatible
filetype off

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'gmarik/Vundle.vim'

Plugin 'yssl/QFEnter'
Plugin 'majutsushi/tagbar'
Plugin 'tpope/vim-endwise'
Plugin 'tpope/vim-rails'
Plugin 'tpope/vim-fugitive'
Plugin 'tpope/vim-surround'
Plugin 'tpope/vim-repeat'
Plugin 'tpope/vim-abolish'
Plugin 'tpope/vim-unimpaired'
Plugin 'xolox/vim-misc'
Plugin 'xolox/vim-easytags'
Plugin 'xolox/vim-reload'
Plugin 'mhinz/vim-signify'
Plugin 'Lokaltog/vim-easymotion'
Plugin 'sjl/gundo.vim'
Plugin 'scrooloose/nerdcommenter'
Plugin 'scrooloose/nerdtree'
Plugin 'jistr/vim-nerdtree-tabs'
Plugin 'maxbrunsfeld/vim-yankstack'
Plugin 'kien/ctrlp.vim'
Plugin 'bling/vim-airline'
Plugin 'bling/vim-bufferline'
Plugin 'techlivezheng/vim-plugin-minibufexpl'
Plugin 'edkolev/tmuxline.vim'
Plugin 'edkolev/promptline.vim'
Plugin 'rking/ag.vim'
Plugin 'elzr/vim-json'
Plugin 'pencilcheck/hlnext'
Plugin 'Align'
Plugin 'cecutil'
Plugin 'vis'
Plugin 'atweiden/vim-dragvisuals'

Plugin 'lukaszb/vim-web-indent'
Plugin 'othree/javascript-libraries-syntax.vim'
Plugin 'digitaltoad/vim-jade'
Plugin 'tpope/vim-haml'
Plugin 'kchmck/vim-coffee-script'
Plugin 'slim-template/vim-slim'
Plugin 'puppetlabs/puppet-syntax-vim'
Plugin 'tpope/vim-markdown'

Plugin 'junegunn/seoul256.vim'
Plugin 'michalbachowski/vim-wombat256mod'
Plugin 'tomasr/molokai'
Plugin 'davidkariuki/sexy-railscasts-256-theme'
Plugin 'endel/vim-github-colorscheme'

"Plugin 'Shougo/neocomplcache.vim'
"Plugin 'vim-scripts/TeX-PDF'
"Plugin 'tpope/vim-bundler'
"Plugin 'tpope/vim-rake'
"Plugin 'tpope/vim-eunuch'
"Plugin 'tpope/vim-unimpaired'
"Plugin 'lukaszb/vim-web-indent'
"Plugin 'AndrewRadev/undoquit.vim'
"Plugin 'vim-scripts/sessionman.vim'
"Plugin 'kana/vim-textobj-user'
"Plugin 'terryma/vim-multiple-cursors'
"Plugin 'terryma/vim-expand-region'
"Plugin 'dkprice/vim-easygrep'
"Plugin 'mileszs/ack.vim'
"Plugin 'xolox/vim-session'
"Plugin 'airblade/vim-gitgutter'

" Blacklisted
"Plugin 'tpope/vim-speeddating'
"Plugin 'tpope/vim-commentary'
"Plugin 'tpope/vim-abolish'
"Plugin 'scrooloose/syntastic'
"Plugin 'Raimondi/delimitMate'
"Plugin 'Lokaltog/powerline'
"Plugin 'Valloric/YouCompleteMe'
"Plugin 'ton/vim-bufsurf'


" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

" }}}
" Jumps to last known position {{{

" just after opening it, if the '"' mark is set:"
au BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g`\"" | endif

" }}}
" Disable vim swap for COMMIT_EDITMSG {{{

autocmd BufRead,BufNewFile COMMIT_EDITMSG set nobackup
autocmd BufRead,BufNewFile COMMIT_EDITMSG set noswapfile

" }}}
" SwapWindow {{{

function! MarkWindowSwap()
    " marked window number
    let g:markedWinNum = winnr()
    let g:markedBufNum = bufnr("%")
endfunction

function! DoWindowSwap()
    let curWinNum = winnr()
    let curBufNum = bufnr("%")
    " Switch focus to marked window
    exe g:markedWinNum . "wincmd w"

    " Load current buffer on marked window
    exe 'hide buf' curBufNum

    " Switch focus to current window
    exe curWinNum . "wincmd w"

    " Load marked buffer on current window
    exe 'hide buf' g:markedBufNum

    " Switch focus back to marked window (not what I want)
    "exe g:markedWinNum . "wincmd w"
endfunction

" window cursor moving
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" resizing window
nnoremap < <C-w><
nnoremap > <C-w>>
nnoremap <C-_> <C-w>- " Ctrl and -
nnoremap = <C-w>+ " Ctrl and +

" window swapping
nnoremap H :call MarkWindowSwap()<CR> <C-w>h :call DoWindowSwap()<CR>
nnoremap J :call MarkWindowSwap()<CR> <C-w>j :call DoWindowSwap()<CR>
nnoremap K :call MarkWindowSwap()<CR> <C-w>k :call DoWindowSwap()<CR>
nnoremap L :call MarkWindowSwap()<CR> <C-w>l :call DoWindowSwap()<CR>

" window moving
nnoremap <C-w><C-h> <C-w>H
nnoremap <C-w><C-j> <C-w>J
nnoremap <C-w><C-k> <C-w>K
nnoremap <C-w><C-l> <C-w>L

" }}}
" Syntax Info {{{
function! GetSynInfo()
    let stack = synstack(line("."), col("."))

    let info = ""

    for synid in reverse(stack)
        if strlen(info)
            let info .= " < "
        endif

        let syn = GetSynDict(synid)
        let info .= GetSynInfoString(syn)
    endfor

    return info
endfunction

function! GetSynInfoString(syndict)
    if a:syndict["syn"] != a:syndict["hi"]
        let add_hi = a:syndict["hi"]." "
    else
        let add_hi = ""
    endif

    return a:syndict["syn"]." (".add_hi."fg=".a:syndict["fg"]." bg=".a:syndict["bg"].")"
endfunction

function! GetSynString(syndict)
    return a:syndict["syn"]
endfunction

function! GetHereSynId(trans)
    return synID(line("."), col("."), a:trans)
endfunction

function! GetSynDict(synid)
    let hiid = synIDtrans(a:synid)

    let syn = synIDattr(a:synid, "name")
    let hi = synIDattr(hiid, "name")
    let fg = synIDattr(hiid, "fg")
    let bg = synIDattr(hiid, "bg")

    return {"syn":syn, "hi":hi, "fg":fg, "bg":bg}
endfunction

nnoremap g<C-h> :echo GetSynInfo()<CR>

" Debug syntax info
nmap  <F9>  :echo "hi<" . synIDattr(synID(line("."),col("."),1),"name") . '> trans<' . synIDattr(synID(line("."),col("."),0),"name") . "> lo<" . synIDattr(synIDtrans(synID(line("."),col("."),1)),"name") . ">"<CR>
" }}}
" Folding {{{

" Ruby custom folding
"function! GetSynIDattr()
  "let stack = synstack(line("."), (match(getline(line(".")), '^\s*\zs'))+1)

  "for synid in stack
    "if GetSynString(GetSynDict(synid)) ==? "rubyMethodBlock" || GetSynString(GetSynDict(synid)) ==? "rubyDefine"
      "return "a match"
    "endif
  "endfor

  "return "no match"
"endfunction

"nnoremap g<C-g> :echo GetSynIDattr()<CR>

" This fold expr function will fold only ruby defs and documentation
" =begin=end blocks
function! RubyMethodFold(line)
  let stack = synstack(a:line, (match(getline(a:line), '^\s*\zs'))+1)

  for synid in stack
    if GetSynString(GetSynDict(synid)) ==? "rubyMethodBlock" || GetSynString(GetSynDict(synid)) ==? "rubyDefine" || GetSynString(GetSynDict(synid)) ==? "rubyDocumentation"
      return 1
    endif
  endfor

  return 0
endfunction

" folding is disabled by default but can be quickly toggled
autocmd BufNewFile,BufReadPost *.coffee setl foldmethod=indent nofoldenable
autocmd BufNewFile,BufReadPost *.ng-classify setl foldmethod=indent nofoldenable
autocmd BufNewFile,BufReadPost *.rb setl foldmethod=expr foldexpr=RubyMethodFold(v:lnum) nofoldenable

" }}}
" Settings {{{

set wildignore+=*.o,*.obj,.git,.svn,*.pyc,*/tmp/*,*.so,*.swp,*.zip,*.class
set fileencodings=utf-8,big5,euc-jp,euc-kr,gbk,utf-bom,iso8859-1,latin1

set timeout timeoutlen=200 ttimeoutlen=100

set modelines=2

" tab setup
set expandtab
"set noexpandtab

set tabstop=2
set shiftwidth=2
set softtabstop=2

set autoindent
set copyindent
set smartindent
"set cindent
set smarttab

set showmatch "useful to show matched parenthesis
set matchtime=3

set fdm=marker
highlight Folded guibg=grey guifg=blue

set encoding=utf-8
set scrolloff=10
"set scrolljump=5
set showmode
set showcmd
set ruler
set lazyredraw
set hidden
set title
set wildmenu
set wildmode=list:longest,full
set visualbell
set noerrorbells
set cursorline
set ttyfast
set ft=sh
set backspace=indent,eol,start
set laststatus=2
set number

set pastetoggle=<F2>

set mouse=a "for scrolling

" Enable per project .vimrc
set exrc
set secure

" MacVim copy with native motion verbs
set clipboard=unnamed

set history=1000 "remembers more commands and search history
" new features in Vim 7.3
"set relativenumber
set undodir='~/.vim/undodir'
set undofile
set undolevels=1000 "maximum number of changes that can be undone
set undoreload=10000 "maximum number lines to save for undo on a buffer reload

" please, no tmp or swap files scattered across my folders, so messy
" need to create the directory or those will not work
set backupdir=~/.vimtmp,.
set directory=~/.vimtmp,.

" Or turn it off completely, we have git
set nobackup
set noswapfile

"nnoremap / /\v
"vnoremap / /\v
set ignorecase
set smartcase
set infercase
set gdefault
set nohlsearch
set incsearch
set showmatch
set hlsearch

" font configuration
"set guifont=Meslo\ LG\ M\ DZ:h13
"set guifont=Menlo\ for\ Powerline:h11
"set guifont=Monaco\ for\ Powerline:h11
set guifont=PragmataPro\ for\ Powerline:h14
"set guifont=Menlo:h11
"set guifont=MonteCarlo:h11 "11 should be optimal for this font
"modify the cursor so it looks like its iTerm counterpart
"set guicursor=i-n-v-c:hor10-Cursor
"set guicursor+=a:blinkon0

" show invisible characters
set list
set listchars=tab:▸\ ,eol:¬,trail:.,extends:#,nbsp:.

"set wrap
"set linebreak
"set textwidth=80
set formatoptions=tqrn1

" For ColorColumn
set colorcolumn=81

" Instead of showing for all columns, only highlight lines that go over
"highlight ColorColumn ctermbg=red
"call matchadd('ColorColumn', '\%81v', 100)

" }}}
" Vim Key mapping {{{

" remap <leader> key to ,
let mapleader=","

" Split buffers into windows
map <leader>bs :tab sball<CR>

" Buffer movements
nnoremap <leader>d :bd<CR>
" vim-unimpaired has bindings for those
"nnoremap [ :bp<CR>
"nnoremap ] :bn<CR>
nnoremap <leader>1 :1b<CR>
nnoremap <leader>2 :2b<CR>
nnoremap <leader>3 :3b<CR>
nnoremap <leader>4 :4b<CR>
nnoremap <leader>5 :5b<CR>
nnoremap <leader>6 :6b<CR>
nnoremap <leader>7 :7b<CR>
nnoremap <leader>8 :8b<CR>
nnoremap <leader>9 :9b<CR>
nnoremap <leader>0 :10b<CR>

" Key bindings
noremap <F1> <ESC>

" Disable q and Q
map q <Nop>
map Q <Nop>

" too lazy to type :
nnoremap ; :

vnoremap <Tab> >gv
vnoremap <S-Tab> <gv

"" Map folding to Spacebar
nnoremap <Space> za

" Jumps to next row in long wrapped lines
nnoremap j gj
nnoremap k gk

nnoremap <leader>w <C-w>v<C-w>l
nnoremap <leader>s <C-w>s<C-w>j
nnoremap <leader>v :vsplit $MYVIMRC<cr>
nnoremap <leader>q :copen<cr>
"nnoremap <leader>v <C-w><C-v><C-l>:e $MYVIMRC<cr>

" Split selected text into lines
vnoremap <leader>k :s/ /\r/g<cr>


" Vundle shortkeys
nnoremap <leader>b :PluginInstall<cr>
nnoremap <leader>c :PluginClean<cr>

" Let you edit sudo files after opening it
cmap w!! w !sudo tee % >/dev/null

" Search for visually selected text
" Search for selected text, forwards or backwards.
vnoremap <silent> gd :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy/<C-R><C-R>=substitute(
  \escape(@", '/\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>
vnoremap <silent> gD :<C-U>
  \let old_reg=getreg('"')<Bar>let old_regtype=getregtype('"')<CR>
  \gvy?<C-R><C-R>=substitute(
  \escape(@", '?\.*$^~['), '\_s\+', '\\_s\\+', 'g')<CR><CR>
  \gV:call setreg('"', old_reg, old_regtype)<CR>

" }}}
" Fugitive {{{

nnoremap gst :Gstatus<CR>
nnoremap gdf :Gdiff<CR>
nnoremap gbl :Gblame<CR>
nnoremap gco :Gread<CR>
nnoremap ged :Gedit<CR>
nnoremap gbs :Gbrowse<CR>

" All previous revision of the file
nnoremap gl :Glog<CR>

" All previous commits with the file
nnoremap glg :Glog -- %<CR>

" }}}
" Cursor highlight {{{

" Only highlight current line number instead of the whole line
hi clear CursorLine
augroup CLClear
  autocmd! ColorScheme * hi clear CursorLine
augroup END

hi CursorLineNR cterm=bold
augroup CLNRSet
  autocmd! ColorScheme * hi CursorLineNR cterm=bold
augroup END

" }}}
" Sessionman {{{

" Autosave session on vim exit, and open last saved session on vim launch with
" no arguments
"set viminfo='100,<50,s10,h,!
"autocmd VimEnter * SessionOpenLast
"let sessionman_save_on_exit = 1

" }}}
" Colorscheme/Syntax {{{

" clear syntax for a large file with a very long first line
autocmd BufWinEnter * if line2byte(line("$") + 1) > 10000000 | syntax clear | endif

if &t_Co > 2 || has("gui_running")
  syntax on
endif

if &t_Co >= 256
  colorscheme seoul256
  "colorscheme seoul256-light

  "colorscheme wombat
  "colorscheme wombat256mod
  "colorscheme molokai
  "colorscheme zenburn
  "colorscheme sexy-railscasts-256
  "colorscheme solarized
endif

if has("gui_running")
  colorscheme github
endif

" }}}
" Custom file syntax highlighting {{{

"enable prawn files syntax highlight
au BufNewFile,BufRead *.prawn set filetype=ruby

"enable skim files syntax highlight
au BufNewFile,BufRead *.skim set filetype=slim

"enable ng-classify files syntax highlight
au BufNewFile,BufRead *.ng-classify set filetype=coffee

" }}}
" Search AutoHighlight {{{

" Highlight all instances of word under cursor, when idle.
" Useful when studying strange source code.
" Type z/ to toggle highlighting on/off.
nnoremap z/ :if AutoHighlightToggle()<Bar>set hls<Bar>endif<CR>
function! AutoHighlightToggle()
  let @/ = ''
  if exists('#auto_highlight')
    au! auto_highlight
    augroup! auto_highlight
    setl updatetime=4000
    echo 'Highlight current word: off'
    return 0
  else
    augroup auto_highlight
      au!
      au CursorHold * let @/ = '\V\<'.escape(expand('<cword>'), '\').'\>'
    augroup end
    setl updatetime=500
    echo 'Highlight current word: ON'
    return 1
  endif
endfunction

" }}}
" Sy (signify) {{{

let g:signify_vcs_list = [ 'git', 'hg' ]
let g:signify_update_on_focusgained = 1
let g:signify_update_on_bufenter = 1

" Jump between git diff hunk
nmap <silent> ]h ]c
nmap <silent> [h [c

" }}}
" GitGutter {{{

" Jump between git diff hunk
"nmap <silent> ]h :<C-U>execute "GitGutterNextHunk"<CR>
"nmap <silent> [h :<C-U>execute "GitGutterPrevHunk"<CR>

" }}}
" NERDTree {{{

"nnoremap <leader>n :NERDTreeToggle<cr>

" }}}
" NERDTree tabs {{{

nnoremap <leader>n :NERDTreeTabsToggle<cr>
let g:nerdtree_tabs_open_on_gui_startup = 0
let g:nerdtree_tabs_open_on_console_startup = 0

" }}}
" Tagbar {{{

nmap <leader>r :TagbarToggle<cr>
let g:tagbar_autoclose = 1
let g:tagbar_autofocus = 1
let g:tagbar_autoshowtag = 1

" Tagbar - ruby
let g:tagbar_type_ruby = {
    \ 'kinds' : [
        \ 'm:modules',
        \ 'c:classes',
        \ 'd:describes',
        \ 'C:contexts',
        \ 'f:methods',
        \ 'F:singleton methods'
    \ ]
\ }

" }}}
" Gundo {{{

nnoremap <leader>u :GundoToggle<CR>

" }}}
" Matching brackets/parenthesis {{{

"hi MatchParen cterm=underline ctermfg=111 ctermbg=235 gui=underline guifg=#80a0ff guibg=bg
hi MatchParen term=underline cterm=underline ctermfg=147 ctermbg=235 gui=underline guifg=#80a0ff guibg=bg

" }}}
" CtrlP {{{

" Make CtrlP use ag command. Way faster and no useless filters
let g:ctrlp_user_command = 'ag --follow --nogroup --nobreak --noheading --nocolor -a -g "" %s '


let g:ctrlp_cmd = 'CtrlP'

" Improve performance
let g:ctrlp_max_depth = 20

let g:ctrlp_lazy_update = 0


" so I don't have to wait for indexing when I startup vim
let g:ctrlp_clear_cache_on_exit = 0

let g:ctrlp_working_path_mode = 'cr'

let g:ctrlp_show_hidden = 1

let g:ctrlp_switch_buffer = 0

let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'

" }}}
" ag.vim {{{

" Do a global search for the keyword under the cursor from current directory
" https://github.com/rking/ag.vim/issues/21
" Ag! prevents from jumping to first result when searched
nnoremap <leader>zz :Ag! <C-r><C-w><CR>
nnoremap <leader>xx :AgFile! <C-r><C-w><CR>
let g:aghighlight=1

" }}}
" ack.vim {{{

"let g:ackprg = 'ag --nogroup --nocolor --column'
"nnoremap <leader>vv :Ack <C-r><C-w><CR>

" }}}
" vim-easytags {{{

nnoremap <leader>t :UpdateTags<CR>
" it is too slow to load
let g:easytags_always_enabled = 0
let g:easytags_python_enabled = 1
let g:easytags_syntax_keyword = 'always'
let g:easytags_async = 1
let g:easytags_file = '~/.vim/tags/tags'
let g:easytags_by_filetype = '~/.vim/tags'
":set tags = ./tags;
"let g:easytags_dynamic_files = 1
let g:easytags_resolve_links = 1
let g:easytags_autorecurse = 1
let g:easytags_on_cursorhold = 0
let g:easytags_events = [] "disable easytag auto update, as ctags will sometimes go crazy

" Tag jumping (it shows all matches)
nnoremap <C-\> g]

" }}}
" TeX-PDF {{{

let g:tex_pdf_map_func_keys = 0
noremap <silent> <leader>y <Esc>:BuildAndViewTexPdf<CR>
inoremap <silent> <leader>y <Esc>:BuildAndViewTexPdf<CR>

" }}}
" Neocomplcache {{{

"let g:neocomplcache_enable_at_startup = 1
"let g:neocomplcache_enable_smart_case = 1
" Enable heavy features.
" Use camel case completion.
"let g:neocomplcache_enable_camel_case_completion = 1
" Use underbar completion.
"let g:neocomplcache_enable_underbar_completion = 1

" <TAB>: completion.
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" }}}
" Bufferline {{{

  let g:bufferline_rotate = 1
  " Statusline integration
  let g:bufferline_echo = 0
  autocmd VimEnter *
    \ let &statusline='%{bufferline#refresh_status()}'
      \ .bufferline#get_status_string()

" }}}
" Airline {{{

"let g:airline_theme = 'wombat'
"let g:airline_theme = 'dark'
let g:airline_theme = 'murmur'
let g:airline_powerline_fonts = 1
let g:airline#extensions#tabline#enabled = 1
let g:airline#extensions#tabline#buffer_nr_show = 1
let g:airline#extensions#bufferline#enabled = 0
let g:airline#extensions#tmuxline#enabled = 0 "so it doens't overwrite tmux settings

" Promptline {{{
" }}}

let g:promptline_theme = 'jelly'
let g:promptline_preset = {
        \'b' : [ promptline#slices#cwd() ],
        \'c' : [ promptline#slices#jobs() ],
        \'z' : [ promptline#slices#vcs_branch() ],
        \'warn' : [ promptline#slices#last_exit_code(), promptline#slices#battery() ]}

" }}}
" Session {{{

let g:session_autoload = 'no'

" }}}
" QFEnter {{{

let g:qfenter_vopen_map = ['<Leader>w']
let g:qfenter_hopen_map = ['<Leader>s']
let g:qfenter_topen_map = ['<Leader><Tab>']

" }}}
" yankstack {{{

call yankstack#setup()

nmap <leader>p <Plug>yankstack_substitute_older_paste
nmap <leader>P <Plug>yankstack_substitute_newer_paste

" }}}
" javascript-libraries-syntax.vim {{{

let g:used_javascript_libs = 'angularjs,angularui,underscore,backbone'

" }}}
" Dragvisuals {{{

" https://github.com/atweiden/vim-dragvisuals
runtime plugin/dragvisuals.vim
vmap  <expr>  <LEFT>   DVB_Drag('left')
vmap  <expr>  <RIGHT>  DVB_Drag('right')
vmap  <expr>  <DOWN>   DVB_Drag('down')
vmap  <expr>  <UP>     DVB_Drag('up')
vmap  <expr>  D        DVB_Duplicate()

let g:DVB_TrimWS = 1

" }}}
" minibufexpl {{{

let g:miniBufExplorerAutoStart = 0

" }}}
