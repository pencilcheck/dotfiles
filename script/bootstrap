#!/usr/bin/env bash
#
# Linking all dot files into $HOME

DOTFILES_ROOT="`pwd`"

set -e

echo ''

# Ask for the administrator password upfront
sudo -v

# Keep-alive: update existing `sudo` time stamp until `.osx` has finished
while true; do sudo -n true; sleep 60; kill -0 "$$" || exit; done 2>/dev/null &

info () {
  printf "  [ \033[00;34m..\033[0m ] $1"
}

user () {
  printf "\r  [ \033[0;33m?\033[0m ] $1 "
}

success () {
  printf "\r\033[2K  [ \033[00;32mOK\033[0m ] $1\n"
}

fail () {
  printf "\r\033[2K  [\033[0;31mFAIL\033[0m] $1\n"
  echo ''
  exit
}

setup_git_submodules () {
  git submodule init
  git submodule update
}

link_files () {
  ln -s $1 $2
  success "linked $1 to $2"
}

sudo_link_files () {
  sudo ln -s $1 $2
  success "linked $1 to $2"
}

install_refit () {
  source="$DOTFILES_ROOT/refit/efi"
  dest="/efi"
  sudo rm -rf $dest
  success "removed $dest"
  sudo_link_files $source $dest
  sudo sh /efi/refit/enable.sh
  success "successfully bless this computa!"
}

install_dotfiles () {
  info 'installing dotfiles'

  overwrite_all=false
  backup_all=false
  skip_all=false

  for source in `find $DOTFILES_ROOT -maxdepth 2 -name \*.symlink`
  do
    dest="$HOME/.`basename \"${source%.*}\"`"

    if [ -f $dest ] || [ -d $dest ]
    then

      overwrite=false
      backup=false
      skip=false

      if [ "$overwrite_all" == "false" ] && [ "$backup_all" == "false" ] && [ "$skip_all" == "false" ]
      then
        user "File already exists: `basename $source`, what do you want to do? [s]kip, [S]kip all, [o]verwrite, [O]verwrite all, [b]ackup, [B]ackup all?"
        read -n 1 action

        case "$action" in
          o )
            overwrite=true;;
          O )
            overwrite_all=true;;
          b )
            backup=true;;
          B )
            backup_all=true;;
          s )
            skip=true;;
          S )
            skip_all=true;;
          * )
            ;;
        esac
      fi

      if [ "$overwrite" == "true" ] || [ "$overwrite_all" == "true" ]
      then
        rm -rf $dest
        success "removed $dest"
      fi

      if [ "$backup" == "true" ] || [ "$backup_all" == "true" ]
      then
        mv $dest $dest\.backup
        success "moved $dest to $dest.backup"
      fi

      if [ "$skip" == "false" ] && [ "$skip_all" == "false" ]
      then
        link_files $source $dest
      else
        success "skipped $source"
      fi

    else
      link_files $source $dest
    fi

  done
}

install_dotfiles
install_refit
setup_git_submodules

#function bootstrap() {
    #cd ~
    #create_links
    #update_git_submodules
#}

#function create_links() {
    ## vim
    #ln -is .dotfiles/.vimrc
    #ln -is .dotfiles/.vim

    ## gvim
    #ln -is .dotfiles/.gvimrc

    ## screen
    #ln -is .dotfiles/.screenrc

    ## zsh
    #ln -is .dotfiles/.zshrc
    #ln -is .dotfiles/.zsh
    #ln -is .dotfiles/.oh-my-zsh

    ## bash
    #ln -is .dotfiles/.bashrc

    ## git config
    #ln -is .dotfiles/.gitconfig
    #ln -is .dotfiles/.gitignore_global

    ## hg
    #ln -is .dotfiles/.hgignore_global

    ## ssh
    #ln -is .dotfiles/.ssh

    ## tmux
    #ln -is .dotfiles/.tmux.conf
    #ln -is .dotfiles/tmux-colors-solarized/tmuxcolors-dark.conf .tmuxcolors-dark.conf
    #ln -is .dotfiles/tmux-colors-solarized/tmuxcolors-light.conf .tmuxcolors-light.conf
    #ln -is .dotfiles/tmux-colors-solarized/tmuxcolors-256.conf .tmuxcolors-256.conf
#}

# If we are on a mac, lets install and setup homebrew
if [ "$(uname -s)" == "Darwin" ]
then
  info "installing dependencies"
  if . bin/dot > /tmp/dotfiles-dot 2>&1
  then
    success "dependencies installed"
  else
    fail "error installing dependencies"
  fi
fi

echo ''
echo '  All installed!'
